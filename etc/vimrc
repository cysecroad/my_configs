" $VIMRUNTIME refers to the versioned system directory where Vim stores its
" system runtime files -- /usr/share/vim/vim<version>.
"
" Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override
" any settings in these files.
"
" If you don't want that to happen, uncomment the below line to prevent
" defaults.vim from being loaded.
" let g:skip_defaults_vim = 1
"
" If you would rather _use_ default.vim's settings, but have the system or
" user vimrc override its settings, then uncomment the line below.
" source $VIMRUNTIME/defaults.vim

" All Debian-specific settings are defined in $VIMRUNTIME/debian.vim and
" sourced by the call to :runtime you can find below.  If you wish to change
" any of those settings, you should do it in this file or
" /etc/vim/vimrc.local, since debian.vim will be overwritten everytime an
" upgrade of the vim packages is performed. It is recommended to make changes
" after sourcing debian.vim so your settings take precedence.

runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes
" numerous options, so any other options should be set AFTER changing
" 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"filetype plugin indent on

" Basic Setup
set nocompatible        " Use Vim defaults instead of 100% vi compatibility
filetype on             " Enable file type detection
filetype plugin on      " Enable loading plugins for specific file types
filetype indent on      " Enable loading indentation rules for specific file types
syntax on               " Enable syntax highlighting

" Interface Improvements
set number              " Show line numbers
set cursorline          " Highlight current line
set showcmd             " Show partial commands in status line
set showmode            " Show current mode (insert/normal/visual)
set showmatch          " Highlight matching brackets
set wildmenu           " Enhanced command-line completion
set wildmode=list:longest  " Complete longest common string, then list alternatives
set wildignore=*.docx,*/jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx  " Ignore binary files in completion

" Search Behavior
set incsearch          " Show matches while typing search pattern
set ignorecase         " Case-insensitive search by default
set smartcase          " Case-sensitive if search contains uppercase
set hlsearch           " Highlight all search matches
nnoremap <CR> :noh<CR><CR>    " Clear search highlighting with Enter

" Indentation and Formatting
set shiftwidth=2       " Number of spaces for auto-indent
set tabstop=2          " Number of spaces that <Tab> counts for
set expandtab          " Convert tabs to spaces
set autoindent         " Copy indent from current line when starting a new line
filetype plugin indent on  " Smart indentation based on file type

" File Management
set autowrite          " Auto-save before commands like :next and :make
set nobackup           " Don't create backup files

" Custom Key Mappings
inoremap jj <esc>      " Quick escape from insert mode
nnoremap <space> :     " Use space as command trigger
nnoremap o o<esc>      " Add new line below without entering insert mode
nnoremap O O<esc>      " Add new line above without entering insert mode
nnoremap Y y$          " Make Y behave like D and C (to end of line)

" Mouse Support
set mouse=a            " Enable mouse in all modes

" External Configuration
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

" More intuitive split navigation using Ctrl + hjkl
nnoremap <C-J> <C-W><C-J>    " Move to split below
nnoremap <C-K> <C-W><C-K>    " Move to split above
nnoremap <C-L> <C-W><C-L>    " Move to split right
nnoremap <C-H> <C-W><C-H>    " Move to split left

" Natural split opening - matches western reading direction
set splitbelow      " New horizontal splits appear below
set splitright      " New vertical splits appear right

" Use system clipboard for all operations
set clipboard=unnamed,unnamedplus   " Seamless copy/paste with system

" Persistent undo - keep undo history across sessions
if has('persistent_undo')
    set undofile
    set undodir=~/.vim/undo    " Store undo files separately
endif

" Enhanced status line with useful information
set laststatus=2    " Always show status line
" Detailed status line format
set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)

" Code folding configuration
set foldmethod=indent    " Fold based on indentation
set foldnestmax=10      " Prevent too many folds
set nofoldenable        " Start with folds open
set foldlevel=2         " Set initial fold level

" Whitespace visualization - spot problematic spaces and tabs
set listchars=tab:>·,trail:~,extends:>,precedes:<,space:·
set list                " Show whitespace characters

" Auto-reload files changed outside vim
set autoread
au FocusGained,BufEnter * :checktime   " Check for file changes when vim regains focus

" Auto-complete brackets and indent
inoremap {<CR> {<CR>}<ESC>O   " Auto-complete curly braces
inoremap [<CR> [<CR>]<ESC>O   " Auto-complete square brackets
inoremap (<CR> (<CR>)<ESC>O   " Auto-complete parentheses

" Easier buffer management
nnoremap <silent> <Leader>b :buffers<CR>    " List all buffers
nnoremap gb :bnext<CR>                      " Go to next buffer
nnoremap gB :bprevious<CR>                  " Go to previous buffer